/*
mplement next permutation, which rearranges numbers into the lexicographically next greater permutation of numbers.

If such arrangement is not possible, it must rearrange it as the lowest possible order (ie, sorted in ascending order).

The replacement must be in-place and use only constant extra memory.

Here are some examples. Inputs are in the left-hand column and its corresponding outputs are in the right-hand column.

1,2,3 → 1,3,2
3,2,1 → 1,2,3
1,1,5 → 1,5,1
*/


// Time complexity O(n)

class Solution {
    public void nextPermutation(int[] nums) {
        if (nums == null || nums.length <= 1) {
            return;
        }
        
        int indexOfFirstDecreasingNumber = nums.length - 2;
        // Moving backwards, find the first decreasing number
        while (indexOfFirstDecreasingNumber >= 0 && 
               nums[indexOfFirstDecreasingNumber + 1] <= nums[indexOfFirstDecreasingNumber]) {
            indexOfFirstDecreasingNumber--;
        }
        
        // if none are found (or indexOfFirstDecreasingNumber moved to -1) then not possible 
        // to find the next permutaion. We just need to reverse the numbers to get the inc
        // order of nums 
        
        // indexOfFirstDecreasingNumber>=0 means a decreasing number was found
        if (indexOfFirstDecreasingNumber >= 0) {
            int indexOfNumberToSwapWith = nums.length - 1;
            
            // Moving backwards again, find the first number just bigger
            // than the 'first decreasing number' which is at i        
            while (indexOfNumberToSwapWith > 0 && 
                   nums[indexOfNumberToSwapWith] <= nums[indexOfFirstDecreasingNumber]) {
                indexOfNumberToSwapWith--;
            }
            
            // Step1. Swap nums at i and j
            swap(nums, indexOfFirstDecreasingNumber, indexOfNumberToSwapWith);
        }
        
        // Step 2. Reverse the seq of nums from i till nums.length because
        //      i)  swapping is not enough it might nogt produce the smallest next permutation.
        //          The last digit should be at i to for that to happen
        //      ii) if indexOfFirstDecreasingNumber was -1, ie, could not find a decreasing number
        //          while moving backwards, it means that nums was in fully decreasing order. If we
        //          reverse nums completely we will get the increasing order of nums
        reverse(nums, indexOfFirstDecreasingNumber+1);
    }
    
    private void swap(int[] nums, int i, int j) {
        int temp = nums[i];
        nums[i] = nums[j];
        nums[j] = temp;
    }
    
    private void reverse(int[] nums, int start) {
        int end = nums.length - 1;
        
        while (start < end) {
            swap(nums, start, end);
            start++;
            end--;
        }
    }
}
