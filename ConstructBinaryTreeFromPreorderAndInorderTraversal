//Java Construct Binary Tree from Preorder and Inorder Traversal

/*
Given two integer arrays preorder and inorder where preorder is the preorder traversal 
of a binary tree and inorder is the inorder traversal of the same tree, construct and 
return the binary tree.


Example 1:
Input: preorder = [3,9,20,15,7], inorder = [9,3,15,20,7]
Output: [3,9,20,null,null,15,7]

Example 2:
Input: preorder = [-1], inorder = [-1]
Output: [-1]
 

Constraints:

1 <= preorder.length <= 3000
inorder.length == preorder.length
-3000 <= preorder[i], inorder[i] <= 3000
preorder and inorder consist of unique values.
Each value of inorder also appears in preorder.
preorder is guaranteed to be the preorder traversal of the tree.
inorder is guaranteed to be the inorder traversal of the tree.
*/


class Solution {
    
    /*
    The basic idea is here:
    Say we have 2 arrays, PRE and IN.
    Preorder traversing implies that PRE[0] is the root node.
    Then we can find this PRE[0] in IN, say it's IN[5].
    Now we know that IN[5] is root, so we know that IN[0] - IN[4] is on the left side, 
    IN[6] to the end is on the right side.
    Recursively doing this on subarrays, we can build a tree out of it
    */
    public TreeNode buildTree(int[] preorder, int[] inorder) {
        return helper(preorder, 0, inorder, ins, ine);
    }
    
    private TreeNode helper(int[] preorder, prestart, int[] inorder, int instart, int inend) {
        if (prestart >= preorder.length || instart > inend) return null;
        
        indexinorder = 0;
        for (int i = 0; i < inorder.length; i++) {
            if (preorder[prestart] == inorder[i]) {
                indexinorder = i;
                break;
            }
        }
        
        root.left = helper(preorder, prestart+1, inorder, instart, indexinorder-1);
        root.right = helper(preorder, prestart+1+indexinorder-instart , inorder, indexinorder+1, inend-1);
    }
}
