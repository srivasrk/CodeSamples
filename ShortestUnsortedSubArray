//C# Shortest Unsorted Subarray

/*
Given an integer array, you need to find one continuous subarray that if you only sort this 
subarray in ascending order, then the whole array will be sorted in ascending order, too.

You need to find the shortest such subarray and output its length.

Example 1:
Input: [2, 6, 4, 8, 10, 9, 15]
Output: 5
Explanation: You need to sort [6, 4, 8, 10, 9] in ascending order to make the whole array sorted in ascending order.
Note:
Then length of the input array is in range [1, 10,000].
The input array may contain duplicates, so ascending order here means <=.
*/

public class Solution {
    public int FindUnsortedSubarray(int[] nums) {
        
        int size = nums.Length;
        int start = -1;
        int end = -2;
        
        int min = nums[size-1];
        int max = nums[0];
        
        for (int index = 1; index < size; index++){
            max = Math.Max(nums[index], max);
            min = Math.Min(nums[size-index-1], min);
            
            if (nums[index] < max) {
                end = index; //end will keep moving to right ->
            }
            
            if (nums[size-index-1] > min){
                start = size-index-1; //start will keep moving to the left <-
            }
        }
        
        return end - start + 1;
    }
}
