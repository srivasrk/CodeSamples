//C# Word Ladder

/*
Given two words (beginWord and endWord), and a dictionary's word list, 
find the length of shortest transformation sequence from beginWord to 
endWord, such that:

Only one letter can be changed at a time.
Each transformed word must exist in the word list. Note that beginWord is 
not a transformed word.
For example,

Given:
beginWord = "hit"
endWord = "cog"
wordList = ["hot","dot","dog","lot","log","cog"]
As one shortest transformation is "hit" -> "hot" -> "dot" -> "dog" -> "cog",
return its length 5.

Note:
Return 0 if there is no such transformation sequence.
All words have the same length.
All words contain only lowercase alphabetic characters.
You may assume no duplicates in the word list.
You may assume beginWord and endWord are non-empty and are not the same.
*/

public class Solution {   
    /*
    Note: This function finds the words which are at '1' distance from beginWord, and adds them to toVisit.
    The function will search for all words at distance '1' in words. If such a word is found, it is removed
    from the words list, and added to toVisit queue.
    */
    private void AddNextNeighborWords(char[] beginWord, IList<string> words, Queue<string> toVisit) {
        int index =  words.IndexOf(new string(beginWord));
        if (index > -1){
            words.RemoveAt(index);
        }
        
        for (int i = 0; i < beginWord.Length; i++){
            char c = beginWord[i];//cache the original char
            
            //incrementally change one char at index 'i' and check if exists in words list.
            for (char j = 'a'; j <= 'z'; j++){
                beginWord[i] = j;//change one char at a time
                
                index = words.IndexOf(new string(beginWord));
                if (index >= 0){
                    toVisit.Enqueue(new string(beginWord));
                    words.RemoveAt(index);                    
                }
            }
            beginWord[i] = c;//revert the original char
        }
    }
    
    /*
    Step 1. Get the neighbor words of 'beginWord' in toVisit queue.
    Step 2. for each neighbor word 'candidateWord' in toVisitQueue, 
            check if it is the endWord. If it is, return distance.
    Step 3. If a 'candidateWord' is not the 'endWord', then find the
            subsequent neighbor words for the 'candidateWord'.
    */
    public int LadderLength(string beginWord, string endWord, IList<string> wordList) {
        
        wordList.Add(endWord);
        Queue<string> toVisit = new Queue<string>();
        
        AddNextNeighborWords(beginWord.ToArray(), wordList, toVisit);
        int distance = 2;
        
        while(toVisit.Count > 0){
            int num = toVisit.Count;
            
            for (int i = 0; i < num; i++){
                string candidateWord = toVisit.Dequeue();
                
                if (candidateWord == endWord){
                    return distance;
                }
                
                AddNextNeighborWords(candidateWord.ToArray(), wordList, toVisit);                             
            }
            distance++;
        }
        
        return 0;
    }
}


//Java solution
//https://www.youtube.com/watch?v=PeyYhb8lJJU
class Solution {
    public int ladderLength(String beginWord, String endWord, List<String> wordList) {
        Set<String> wordSet = new HashSet(wordList);
        if (!wordSet.contains(endWord)) {
            return 0;
        }
        
        int result = 0;
        Queue<String> q = new LinkedList();
        
        q.offer(beginWord);
        while(!q.isEmpty()) {
            for(int k = q.size() - 1; k >= 0; k--) {
                String word = q.poll();
                if (word.equals(endWord)) {
                    return result + 1;
                }
                
                for(int i = 0; i < word.length(); i++) {
                    replaceAndMatch(word, i, wordSet, q);
                }
            }
            result++;
        }
        return 0;
    }
    
    private void replaceAndMatch(String word, int i, Set<String> wordSet, Queue<String> q) {
        char[] wordChars = word.toCharArray();
        for (char c = 'a'; c <= 'z'; c++) {
            wordChars[i] = c;
            String oneStepAwayWord = new String(wordChars);
            if (wordSet.contains(oneStepAwayWord) && !oneStepAwayWord.equals(word)) {
                q.offer(oneStepAwayWord);
                wordSet.remove(oneStepAwayWord);
            }
        }
        
    }
}
