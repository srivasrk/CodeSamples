//C# Min Stack

/*
Design a stack that supports push, pop, top, and retrieving the minimum element in constant time.

push(x) -- Push element x onto stack.
pop() -- Removes the element on top of the stack.
top() -- Get the top element.
getMin() -- Retrieve the minimum element in the stack.
Example:
MinStack minStack = new MinStack();
minStack.push(-2);
minStack.push(0);
minStack.push(-3);
minStack.getMin();   --> Returns -3.
minStack.pop();
minStack.top();      --> Returns 0.
minStack.getMin();   --> Returns -2.
*/

/*
Explanation:
1. When you have to push a value which is not min simply push it.
2. When you have to push a value which is smaller than min (ie new min), then
    push the "old min value" and then the "new min value", and update your min variable
3. When you have to pop a value which is not min, simply pop it.
4. When you have to pop a value which is the min, then you have to pop twice. first 
    pop gives you the top, second pop will give you the new min value. Remember when
    you pushed a "new min value", you pushed the "old min value" too
*/
public class MinStack {

    int min;
    Stack<int> stack;
    
    /** initialize your data structure here. */
    public MinStack() {
        min = int.MaxValue;
        stack = new Stack<int>();    
    }
    
    public void Push(int x) {
        
        if (x <= min){
            stack.Push(min);
            min = x;
        }    
        stack.Push(x);
    }
    
    public void Pop() {
        
        if (stack.Pop() == min){
            min = stack.Pop();
        }
    }
    
    public int Top() {
        return stack.Peek();
    }
    
    public int GetMin() {
        return min;
    }
}

/**
 * Your MinStack object will be instantiated and called as such:
 * MinStack obj = new MinStack();
 * obj.Push(x);
 * obj.Pop();
 * int param_3 = obj.Top();
 * int param_4 = obj.GetMin();
 */
