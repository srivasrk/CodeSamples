/*
Given a linked list, swap every two adjacent nodes and return its head.

Example:
Given 1->2->3->4, you should return the list as 2->1->4->3.

Note:
Your algorithm should use only constant extra space.
You may not modify the values in the list's nodes, only nodes itself may be changed.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
 
public class Solution {
    public ListNode SwapPairs(ListNode head) {

        if ((head == null) || (head.next == null)) {
            return head;
        }
        
        ListNode node = head.next;
        head.next = SwapPairs(node.next);
        node.next = head;
        
        return node;
    }
}
