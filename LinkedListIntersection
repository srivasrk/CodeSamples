//C# Intersection of 2 linked lists
/*
Write a program to find the node at which the intersection of two singly linked lists begins.


For example, the following two linked lists:

A:          a1 → a2
                   ↘
                     c1 → c2 → c3
                   ↗            
B:     b1 → b2 → b3
begin to intersect at node c1.


Notes:

If the two linked lists have no intersection at all, return null.
The linked lists must retain their original structure after the function returns.
You may assume there are no cycles anywhere in the entire linked structure.
Your code should preferably run in O(n) time and use only O(1) memory.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
 
 //Solution 1: Does not modify the original Linked List structure
public class Solution {
    
    public int GetNumberOfNodes(ListNode head){
        int count = 0;
        
        while(head != null){
            count++;
            head = head.next;
        }
        
        return count;
    }
    
    public ListNode GetIntersectionNode(ListNode headA, ListNode headB) {
        
        if ((headA == null) || (headB == null)){
            return null;
        }
        
        int countA = GetNumberOfNodes(headA);
        int countB = GetNumberOfNodes(headB);
        ListNode prev = null;
        
        while (countA > countB){
            headA = headA.next;
            countA--;
        }
        while (countB > countA){
            headB = headB.next;
            countB--;
        }
        
        while ((headA != null) && (headB != null)){
            if (headA != headB){
                headA = headA.next;
                headB = headB.next;
            } else {
                prev = headA;
                break;
            }    
        }
        
        return prev;
        
    }
}

//Solutiuon 2: Modifies the Linked List by reversing it
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
   
    private void Reverse(ListNode head) {
        
        var curr = head;
        ListNode prev = null;
        var next = head;
        
        while (curr != null) {
            
            next = curr.next;
            curr.next = prev;  
            prev = curr; 
            curr = next;
        }
    }
    
    public ListNode GetIntersectionNode(ListNode headA, ListNode headB) {
        
        Reverse(headA);     
        Reverse(headB);
        ListNode p = null;
        
        while ((headA == headB) && (headA != null) && (headB != null)) {
            p = headA;
            headA = headA.next;
            headB = headB.next;               
        }
        
        return p;
    }
}
