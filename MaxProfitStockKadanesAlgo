//C# Max Profit Stock Kadanes Algo

/*
Say you have an array for which the ith element is the price of a given stock on day i.
If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), 
design an algorithm to find the maximum profit.

Example 1:
Input: [7, 1, 5, 3, 6, 4]
Output: 5
max. difference = 6-1 = 5 (not 7-1 = 6, as selling price needs to be larger than buying price)

Example 2:
Input: [7, 6, 4, 3, 1]
Output: 0
In this case, no transaction is done, i.e. max profit = 0.
*/

/**
"If you were only permitted to complete at most one transaction (ie, buy one and sell one share of the stock), design an algorithm to find the maximum profit."
I misunderstood the above sentence as at most either buy or sell one share of stock on a single day. In that case, I buy at a local minimum price and sell it at a local maximum to reach a maximum total profit.
Please consider changing it to something like the following:

If you were only permitted to complete at most one buy and at most one sell during the whole period of days,
design an algorithm such that your profit, i.e., sell price minus buy price, is maximized.
Note that you can only not sell a stock before you buy one.
For example:
[1,2,3,4] ==> returns 3 (buy at 1 and sell at 4)
[4,3,2,1] ==> returns 0 (don't buy)
[4,10,25,2,10] ==> returns 21 (buy at 4
/

/*
****************************EXPLANATAION*********************************
    /*  explanation:
    
        *maxCur = current maximum value
        *maxSoFar = maximum value found so far
        A more clear explanation on why sum of subarray works.:
        
        Suppose we have original array:
        [a0, a1, a2, a3, a4, a5, a6]
        
        what we are given here(or we calculate ourselves) is:
        [b0, b1, b2, b3, b4, b5, b6]
        
        where,
        b[i] = 0, when i == 0
        b[i] = a[i] - a[i - 1], when i != 0
        
        suppose if a2 and a6 are the points that give us the max difference (a2 < a6)
        then in our given array, we need to find the sum of sub array from b3 to b6.
        
        b3 = a3 - a2
        b4 = a4 - a3
        b5 = a5 - a4
        b6 = a6 - a5
        
        adding all these, all the middle terms will cancel out except two
        i.e.
        
        b3 + b4 + b5 + b6 = a6 - a2
        
        a6 - a2 is the required solution.
        
        so we need to find the largest sub array sum to get the most profit
    */
*************************************************************************
*/


public class Solution {

    public int MaxProfit(int[] prices) {
        int maxCur = 0;
        int maxSoFar = 0;
        
        for (int index = 1; index < prices.Length; index++){
            maxCur = Math.Max(0, maxCur + prices[index] - prices[index-1]);
            maxSoFar = Math.Max(maxSoFar, maxCur);
        }
        
        return maxSoFar;
    }
}
