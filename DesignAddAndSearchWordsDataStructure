//Java Design Add and Search Words Data Structure

/*
Design a data structure that supports adding new words and finding if a string matches any previously added string.

Implement the WordDictionary class:

WordDictionary() Initializes the object.
void addWord(word) Adds word to the data structure, it can be matched later.
bool search(word) Returns true if there is any string in the data structure that matches word or false otherwise. word may contain dots '.' where dots can be matched with any letter.
 

Example:

Input
["WordDictionary","addWord","addWord","addWord","search","search","search","search"]
[[],["bad"],["dad"],["mad"],["pad"],["bad"],[".ad"],["b.."]]
Output
[null,null,null,null,false,true,true,true]

Explanation
WordDictionary wordDictionary = new WordDictionary();
wordDictionary.addWord("bad");
wordDictionary.addWord("dad");
wordDictionary.addWord("mad");
wordDictionary.search("pad"); // return False
wordDictionary.search("bad"); // return True
wordDictionary.search(".ad"); // return True
wordDictionary.search("b.."); // return True
 

Constraints:

1 <= word.length <= 500
word in addWord consists lower-case English letters.
word in search consist of  '.' or lower-case English letters.
At most 50000 calls will be made to addWord and search.
*/

class WordDictionary {
    
    public class Node {
        String word = "";
        Node[] children = new Node[26];
    }

    private Node root = new Node();
        
    public void addWord(String word) {
        Node current = root;
        for (int i = 0; i < word.length(); i++) {
            int charIndex = word.charAt(i) - 'a';
            if ((current.children[charIndex]) == null) current.children[charIndex] = new Node();
            current = current.children[charIndex];
        }
        current.word = word;
    }
    
    private boolean match(char[] word, int index, Node node) {
        if (index == word.length) return !node.word.equals("");
                
        if (word[index] == '.') {            
            for (int i = 0; i < node.children.length; i++) {
                if (node.children[i] == null) continue;
                else if (match(word, index+1, node.children[i])) return true;
            }
            return false;
        }
        else {
            int charIndex = word[index] - 'a';
            if (node.children[charIndex] == null) return false;
            else return match(word, index+1, node.children[charIndex]);
        }
    }
    
    public boolean search(String word) {
        return match(word.toCharArray(), 0, root);     
    }
}
