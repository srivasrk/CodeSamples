//C# add two numbers

/*
You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.

You may assume the two numbers do not contain any leading zero, except the number 0 itself.

Input: (2 -> 4 -> 3) + (5 -> 6 -> 4)
Output: 7 -> 0 -> 8

*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
 

 
public class Solution {

    public ListNode AddTwoNumbers(ListNode l1, ListNode l2) {
        
        ListNode l3 = null;
        ListNode p = null;
        int sumValue = 0;
        int carry = 0;
        int len1, len2;
        
        if (l1 == null){
            return l2;
        }
        
        if (l2 == null){
            return l1;
        }
        
        while ((l1 != null) && (l2 != null)){
            
            sumValue = l1.val + l2.val + carry;
            
            if (sumValue > 9){
                carry = 1;
                sumValue = sumValue % 10;
            } else {
                carry = 0;
            }
            
            l1 = l1.next;
            l2 = l2.next;
            
            if (l3 == null){
                l3 = new ListNode(sumValue);//start of the new list
                p = l3;
            } else {
                p.next = new ListNode(sumValue);  
                p = p.next;
            }
            
        }
        
        if (l1 == null) {
            while (l2 != null){
                sumValue = carry + l2.val;
                if (sumValue > 9){
                    carry = 1;
                    sumValue = sumValue % 10;
                } else {
                    carry = 0;
                }
                
                p.next = new ListNode(sumValue);
                p = p.next;
                l2 = l2.next;
                
            }
        } else {
            while (l1 != null){
                sumValue = carry + l1.val;
                if (sumValue > 9){
                    carry = 1;
                    sumValue = sumValue % 10;
                } else {
                    carry = 0;
                }
                
                p.next = new ListNode(sumValue);
                p = p.next;
                l1 = l1.next;
                
            }
        }
        
        if (carry > 0){
            p.next = new ListNode(carry);
        }   
        
        return l3;
    }
}