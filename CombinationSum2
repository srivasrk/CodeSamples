//C# Combination Sum 2

/*
Given a collection of candidate numbers (C) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

Each number in C may only be used once in the combination.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [10, 1, 2, 7, 6, 1, 5] and target 8, 
A solution set is: 
[
  [1, 7],
  [1, 2, 5],
  [2, 6],
  [1, 1, 6]
]
*/

public class Solution {
    public IList<IList<int>> CombinationSum2(int[] candidates, int target) {
        Array.Sort(candidates);
        IList<IList<int>> result = new List<IList<int>>();
        GetCombinationSum2(candidates, 0, target, new List<int>(), result);
        return result;
        
    }
    
    public void GetCombinationSum2(int[] candidates, int index, int target, IList<int> current, IList<IList<int>> result){
        if (target == 0){
            result.Add(new List<int>(current));
        } else if (target < 0){
            return;
        } else if (target > 0) {
            
            int t = 0;
            for (int i = index; i < candidates.Length; i++){
                if ((i > index) && (candidates[i] == candidates[i-1])) {
                    continue;
                }
                t = candidates[i];
                current.Add(t);
                GetCombinationSum2(candidates, i+1, target - t, current, result);
                current.RemoveAt(current.Count - 1);
            }
        }
    }
}
