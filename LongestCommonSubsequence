//C# Longest Common Subsequence

/*
LCS Problem Statement: Given two sequences, find the length of longest 
subsequence present in both of them. A subsequence is a sequence that 
appears in the same relative order, but not necessarily contiguous. 
For example, “abc”, “abg”, “bdf”, “aeg”, ‘”acefg”, .. etc are subsequences 
of “abcdefg”. So a string of length n has 2^n different possible subsequences.

It is a classic computer science problem, the basis of diff (a file 
comparison program that outputs the differences between two files), 
and has applications in bioinformatics.

Examples:
LCS for input Sequences “ABCDGH” and “AEDFHR” is “ADH” of length 3.
LCS for input Sequences “AGGTAB” and “GXTXAYB” is “GTAB” of length 4.
*/

using System;
using System.Collections.Generic;
using System.IO;
class Solution {
    static void Main(String[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT. Your class should be named Solution */
        
        string[] tokens = Console.ReadLine().Split(' ');
        int size1 = int.Parse(tokens[0]); 
        int size2 = int.Parse(tokens[1]); 
        
        char[] c1 = Array.ConvertAll(Console.ReadLine().Split(), Char.Parse);
        char[] c2 = Array.ConvertAll(Console.ReadLine().Split(), Char.Parse);
        
        size1 = GetLCS(c1, c2, size1, size2);
               
        Console.WriteLine(size1);
    }
    
    private static int GetLCS(char[] s1, char[] s2, int l1, int l2){
        int[,] grid = new int[l1+1, l2+1];//IMP to have col+1,row+1       
                
        for (int i = 0; i <= l1; i++){            
            for (int j = 0; j <= l2; j++){
                if (i == 0 || j == 0) {
                    grid[i,j] = 0;//set the first row & col to 0
                } else if (s1[i-1] == s2[j-1]) {
                    grid[i,j] = grid[i-1,j-1] + 1;//diagonal
                } else {
                    grid[i,j] = Math.Max(grid[i-1,j], grid[i,j-1]);
                }
            }            
        }
        
        return grid[l1,l2];
    }
}
