/*
Given a binary tree, return the zigzag level order traversal of its nodes' values. 
(ie, from left to right, then right to left for the next level and alternate between).

For example:
Given binary tree [3,9,20,null,null,15,7],
    3
   / \
  9  20
    /  \
   15   7
return its zigzag level order traversal as:
[
  [3],
  [20,9],
  [15,7]
]

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
 
 // Two solution here
 
 //Solution 1
public class Solution {
    
    private int GetHeight(TreeNode root) {
        if (root == null) {
            return 0;
        }
        
        return Math.Max(GetHeight(root.left), GetHeight(root.right)) + 1;
    }
    
    
    private void GetLevelLeftToRight(TreeNode root, IList<int> list, int level, bool leftToRight) {
        
        if (root == null) {
            return;
        }
        
        if (level == 0) {
            list.Add(root.val);
            return;
        }
        
        if (leftToRight) {
            GetLevelLeftToRight(root.left, list, level - 1, leftToRight);
            GetLevelLeftToRight(root.right, list, level - 1, leftToRight);
        } else {            
            GetLevelLeftToRight(root.right, list, level - 1, leftToRight);
            GetLevelLeftToRight(root.left, list, level - 1, leftToRight);
        }
    }
    
    public IList<IList<int>> ZigzagLevelOrder(TreeNode root) {            
        
        int h = GetHeight(root);
        
        Console.WriteLine(h);
        
        IList<IList<int>> result = new List<IList<int>>();
        
        for (int i = 0; i < h; i++) {
            var list = new List<int>();
            
            bool leftToRight = (i % 2 == 0);
            GetLevelLeftToRight(root, list, i, leftToRight);
            
            if (list.Count > 0) {
                result.Add(list);
            }
        }
        
        return result;
    }
}

// Solution 2

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    
    public static int height(TreeNode root){
        if (root == null){
            return -1;
        }
        
        return Math.Max(height(root.left), height(root.right)) + 1;
    }
    
    public static void levelOrderTraversal(TreeNode root, int level, List<int> dataListOnSameLevel){
        
        if (root != null){
            if (level == 0){
                dataListOnSameLevel.Add(root.val);
                return;
            }
            
            levelOrderTraversal(root.left, level-1, dataListOnSameLevel);
            levelOrderTraversal(root.right, level-1, dataListOnSameLevel);
        }
        
        
    }
    
    public List<List<int>> ZigzagLevelOrder(TreeNode root) {
        
        int TreeHeight = height(root);
        List<List<int>> ReturnList = new List<List<int>>();
        
        for (int index = 0; index <= TreeHeight; index++){
            List<int> dataListOnSameLevel = new List<int>();
            
            levelOrderTraversal(root, index, dataListOnSameLevel);
            
            if (index % 2 != 0){
                //reverse the contents of the dataListOnSameLevel
                dataListOnSameLevel.Reverse();
            }
            
            ReturnList.Add(dataListOnSameLevel);
            
        }
        
        return ReturnList;
        
    }
}
