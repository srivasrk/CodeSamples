//C# solution Rotate Function
/*
Given an array of integers A and let n to be its length.

Assume Bk to be an array obtained by rotating the array A k positions clock-wise, we define a "rotation function" F on A as follow:

F(k) = 0 * Bk[0] + 1 * Bk[1] + ... + (n-1) * Bk[n-1].

Calculate the maximum value of F(0), F(1), ..., F(n-1).

Note:
n is guaranteed to be less than 105.

Example:

A = [4, 3, 2, 6]

F(0) = (0 * 4) + (1 * 3) + (2 * 2) + (3 * 6) = 0 + 3 + 4 + 18 = 25
F(1) = (0 * 6) + (1 * 4) + (2 * 3) + (3 * 2) = 0 + 4 + 6 + 6 = 16
F(2) = (0 * 2) + (1 * 6) + (2 * 4) + (3 * 3) = 0 + 6 + 8 + 9 = 23
F(3) = (0 * 3) + (1 * 2) + (2 * 6) + (3 * 4) = 0 + 2 + 12 + 12 = 26

So the maximum value of F(0), F(1), F(2), F(3) is F(3) = 26.
*/

public class Solution {
    public int MaxRotateFunction(int[] A) {
        
        //F(k) = F(k-1) + sum - n*A[k]
        //A[k] is the element which was multiplied by 0
        
        //find F(0) and sum
        int F = 0;
        int sum = 0;
        int len = A.Length;
        
        for (int index = 0; index < len; index++){
            F = F + (A[index] * index);
            sum = sum + A[index];
        }
        
        //now we have F(0)
        //calculare F(1), F(2)...F(n-1), and store the max
        //F(1) = F(0) + sum + (n * A[k])
        //for F(0), A[k] = A[0]
        //for F(1), A[k] = A[n-1] //last element
        //for F(2), A[k] = A[n-2]
        //for F(3), A[k] = A[n-3]
        
        int max = F;
        
        for (int index = 1; index < len; index++){
            F = F + sum - (len * A[len - index]);
            max = Math.Max(F, max);
        }
        
        return max;
        
    }
}

