//C# Climbing Stairs

/*
You are climbing a stair case. It takes n steps to reach to the top.

Each time you can either climb 1 or 2 steps. In how many distinct ways can you climb to the top?

Note: Given n will be a positive integer.

Example 1:
Input: 2
Output: 2
Explanation: There are two ways to climb to the top.
1. 1 step + 1 step
2. 2 steps

Example 2:
Input: 3
Output: 3
Explanation: There are three ways to climb to the top.
1. 1 step + 1 step + 1 step
2. 1 step + 2 steps
3. 2 steps + 1 step
*/

//There are 3 solutions in this file.

//Recusrive with memoization

public class Solution {
    public int ClimbStairs(int n) {
        var memo = new Dictionary<int, int>();
        return GetWays(n, memo);
    }
    
    private int GetWays(int n, Dictionary<int, int> memo) {
        if (n < 0) {
            return 0;
        } else if (n == 0) {
            return 1;
        } else if (memo.ContainsKey(n)) {
            return memo[n];
        } else {
            memo[n] = GetWays(n-1, memo) + GetWays(n-2, memo);
            return memo[n];
        }        
    }
}

//Recursive
public class Solution {
    public int ClimbStairs(int n) {
        
        if (n == 1) {
            return 1;
        } else if (n == 2) {
            return 2;
        } else {
            return (ClimbStairs(n - 1) + ClimbStairs(n - 2));
        }        
    }
}

//Iterative
public class Solution {
    public int ClimbStairs(int n) {
        int count1 = 1;
        int count2 = 1;
        int temp = 1;
        
        for (int i = 2; i <= n; i++){
            temp = count2;
            count2 = count2 + count1;
            count1 = temp;
        }
        
        return count2;
    }
}
