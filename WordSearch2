//Java Word Search II

/*
Given an m x n board of characters and a list of strings words, return all words on the board.
Each word must be constructed from letters of sequentially adjacent cells, where adjacent cells are 
horizontally or vertically neighboring. The same letter cell may not be used more than once in a word.

Example 1:

Input: 
  board = [["o","a","a","n"],["e","t","a","e"],["i","h","k","r"],["i","f","l","v"]],
  words = ["oath","pea","eat","rain"]
Output: ["eat","oath"]

Example 2:

Input: board = 
  [["a","b"],["c","d"]], words = ["abcb"]
Output: []
 

Constraints:

m == board.length
n == board[i].length
1 <= m, n <= 12
board[i][j] is a lowercase English letter.
1 <= words.length <= 3 * 104
1 <= words[i].length <= 10
words[i] consists of lowercase English letters.
All the strings of words are unique.
*/

class Solution {
    
    public class Node {
        String word = "";
        Node[] children = new Node[26];
    }
    
    private Node buildTrie(String[] words) {
        Node root = new Node();
        for (String word: words) {
            Node current = root;
            for (int i = 0; i < word.length(); i++) {
                int charIndex = word.charAt(i) - 'a';
                if (current.children[charIndex] == null) current.children[charIndex] = new Node();
                current = current.children[charIndex];
            }
            current.word = word;
        }
        return root;
    }
    
    private void searchDFS(char[][] board, int i, int j, Node node, List<String> result) {
        char c = board[i][j];
        int charIndex = c - 'a';
        
        if ((c == '.') || (node.children[charIndex] == null)) return;
        node = node.children[charIndex];    
        if (!node.word.equals("")) {
            result.add(node.word);
            node.word = "";
        }
        
        board[i][j] = '.';
        if (i > 0) searchDFS(board, i-1, j, node, result);
        if (j > 0) searchDFS(board, i, j-1, node, result);
        if (i < board.length - 1) searchDFS(board, i+1, j, node, result);
        if (j < board[0].length - 1) searchDFS(board, i, j+1, node, result);
        board[i][j] = c;
    }
    
    public List<String> findWords(char[][] board, String[] words) {
        Node root = buildTrie(words);
        List<String> result = new ArrayList();
        for (int i = 0; i < board.length; i++) {
            for (int j = 0; j < board[0].length; j++) {
                searchDFS(board, i, j, root, result);
            }
        }
        
        return result;
    }
}
