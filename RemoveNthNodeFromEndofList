/*
Remove Nth Node From End of List

Given a linked list, remove the n-th node from the end of list and return its head.

Example:
Given linked list: 1->2->3->4->5, and n = 2.
After removing the second node from the end, the linked list becomes 1->2->3->5.

Note:
Given n will always be valid.

Follow up:
Could you do this in one pass?
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode removeNthFromEnd(ListNode head, int n) {
        ListNode p = head;
        int counter = 0;
        
        while ((counter < n) && (p != null)) {
            p = p.next;
            counter++;
        }
        
        ListNode q = head;
        
        if (p == null) {
            return head.next;
        }
        
        while (p.next != null) {
            p = p.next;
            q = q.next;
        }
        
        q.next = q.next.next;
        return head;
    }
}
