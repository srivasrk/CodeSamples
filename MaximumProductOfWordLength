/*
Maximum Product of Word Lengths
Given a string array words, find the maximum value of length(word[i]) * length(word[j]) where the two words 
do not share common letters. You may assume that each word will contain only lower case letters. If no such 
two words exist, return 0.

Example 1:
Input: ["abcw","baz","foo","bar","xtfn","abcdef"]
Output: 16 
Explanation: The two words can be "abcw", "xtfn".

Example 2:
Input: ["a","ab","abc","d","cd","bcd","abcd"]
Output: 4 
Explanation: The two words can be "ab", "cd".

Example 3:
Input: ["a","aa","aaa","aaaa"]
Output: 0 
Explanation: No such pair of words.
*/

// O(n^2)

/*
// Creating a unique number for every string. Imagine 
// an 32 bit integer where 0 bit corresponds to 'a', 1st bit
// corresponds to 'b' and so on.
*/

class Solution {
    public int maxProduct(String[] words) {
        int[] checker = new int[words.length];
        int max = 0;
        
        for (int i = 0; i < checker.length; i++) {
            String word = words[i];
            int bitsValue = 0;
            for (int j = 0; j < word.length(); j++) {
                // Creating a unique number for every string. Imagine 
                // an 32 bit integer where 0 bit corresponds to 'a', 1st bit
                // corresponds to 'b' and so on.
                // Basically setting 1 at 0th bit if word has 'a'
                bitsValue = bitsValue | (1 << (word.charAt(j) - 'a'));
            }
            checker[i] = bitsValue;
        }
        
        for (int i = 0; i < checker.length-1; i++) {
            for (int j = i+1; j < checker.length; j++) {
                // if there are no common alphabets, then '&'' should give us 0
                if ((checker[i] & checker[j]) == 0) {
                    max = Math.max(max, words[i].length() * words[j].length());
                }
            }
        }
        
        return max;
    }
}
