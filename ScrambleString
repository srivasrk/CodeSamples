//C# Scramble String

/*
Given a string s1, we may represent it as a binary tree by partitioning it to two non-empty substrings recursively.

Below is one possible representation of s1 = "great":

    great
   /    \
  gr    eat
 / \    /  \
g   r  e   at
           / \
          a   t
To scramble the string, we may choose any non-leaf node and swap its two children.

For example, if we choose the node "gr" and swap its two children, it produces a scrambled string "rgeat".

    rgeat
   /    \
  rg    eat
 / \    /  \
r   g  e   at
           / \
          a   t
We say that "rgeat" is a scrambled string of "great".

Similarly, if we continue to swap the children of nodes "eat" and "at", it produces a scrambled string "rgtae".

    rgtae
   /    \
  rg    tae
 / \    /  \
r   g  ta  e
       / \
      t   a
We say that "rgtae" is a scrambled string of "great".

Given two strings s1 and s2 of the same length, determine if s2 is a scrambled string of s1.
*/

public class Solution {
    public bool IsScramble(string s1, string s2) {
        if (s1 == s2) {
            return true;
        }
        
        if (s1.Length != s2.Length){
            return false;
        }
        
        int[] map = new int[26];
        
        for (int i = 0; i < s1.Length; i++){
            map[s1[i] - 'a']++;
            map[s2[i] - 'a']--;
        }
        
        for (int i = 0; i < 26; i++){
            if (map[i] != 0) {
                return false;
            }
        }
        
        //We check for the children, if they are scrambles of each other for both strings.              
        
        for (int i = 1; i < s1.Length; i++){
        
            //Check if the left child of s1 is scramble of left child of s2
            //And right child of s1 is a scramble of s2
            //left child = substring (0, i)
            //right child = substring (i, length - i)
            
            if (IsScramble(s1.Substring(0, i), s2.Substring(0, i)) 
            && IsScramble(s1.Substring(i, s1.Length - i), s2.Substring(i, s2.Length - i))) {
                return true;
            }
            
            //if above fails
            //Check if the left child of s1 is a scramble of right child of s2
            //left child = substring (0, i). right child = substring(length - i, i)            
            //And right child of s1 is a scramble of left child of s2
            //right child = substring (i, length - i). left child = (0, length - i)            
            //Keep in mind the start of substrings. Also length of substrings should be equal.
            
            if (IsScramble(s1.Substring(0, i), s2.Substring(s2.Length - i, i)) 
            && IsScramble(s1.Substring(i, s1.Length - i), s2.Substring(0, s2.Length - i))) {
                return true;
            }
        }
        
        return false;
        
        
    }
}
