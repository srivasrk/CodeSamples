//C# Insert Interval
//Similar to merge intervals

/*
Given a set of non-overlapping intervals, insert a new interval into the intervals (merge if necessary).

You may assume that the intervals were initially sorted according to their start times.

Example 1:
Given intervals [1,3],[6,9], insert and merge [2,5] in as [1,5],[6,9].

Example 2:
Given [1,2],[3,5],[6,7],[8,10],[12,16], insert and merge [4,9] in as [1,2],[3,10],[12,16].

This is because the new interval [4,9] overlaps with [3,5],[6,7],[8,10].
*/

/**
 * Definition for an interval.
 * public class Interval {
 *     public int start;
 *     public int end;
 *     public Interval() { start = 0; end = 0; }
 *     public Interval(int s, int e) { start = s; end = e; }
 * }
 */
public class Solution {
    public IList<Interval> Insert(IList<Interval> intervals, Interval newInterval) {
        
        List<Interval> merged = new List<Interval>();
        merged.Add(newInterval);
        
        for (int i = 0; i < intervals.Count; i++){
            merged.Add(intervals[i]);
        }
        
        merged.Sort((a,b) => a.start - b.start);
        
        int start = merged[0].start;
        int end = merged[0].end;
        IList<Interval> result = new List<Interval>();
        
        for (int i = 0; i < merged.Count; i++){
            if (merged[i].start <= end){
                end = Math.Max(merged[i].end, end);
            } else {
                result.Add(new Interval(start, end));
                start = merged[i].start;
                end = merged[i].end;
            }
        }
        
        result.Add(new Interval(start, end));        
        return result;
        
    }
}
