//C# Binary Tree Sum Root to Leaf Numbers

/*
Given a binary tree containing digits from 0-9 only, each root-to-leaf path could represent a number.

An example is the root-to-leaf path 1->2->3 which represents the number 123.

Find the total sum of all root-to-leaf numbers.

For example,

    1
   / \
  2   3
The root-to-leaf path 1->2 represents the number 12.
The root-to-leaf path 1->3 represents the number 13.

Return the sum = 12 + 13 = 25.

*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    public int SumNumbers(TreeNode root) {
        return FindSumNumbers(root, 0);        
    }
    
    private int FindSumNumbers(TreeNode root, int cur){
        if (root == null) {
            return 0;
        }
        
        if ((root.left == null) && (root.right == null)){
            return ((cur * 10) + root.val);
        }
        
        return (FindSumNumbers(root.left, root.val + (cur * 10)) + 
                FindSumNumbers(root.right, root.val + (cur * 10)));
    }
}
