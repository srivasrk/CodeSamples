/*
Given a binary search tree with non-negative values, find the minimum absolute difference between values of any two nodes.

Example:

Input:

   1
    \
     3
    /
   2

Output:
1

Explanation:
The minimum absolute difference is 1, which is the difference between 2 and 1 (or between 2 and 3).
Note: There are at least two nodes in this BST.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
 
public class Solution {
    public int GetMinimumDifference(TreeNode root) {
        List<int> inorder = new List<int>();
        TraverseInorder(root, inorder);
        int min = int.MaxValue;
        
        for(int i = 0; i < inorder.Count - 1; i++) {
            int diff = inorder[i + 1] - inorder[i];
            if (diff < min) {
                min = diff;
            }
        }        
        return min;
    }
    
    private void TraverseInorder(TreeNode root, List<int> inorder) { 
        if (root == null) {
            return;
        }
        
        TraverseInorder(root.left, inorder);
        inorder.Add(root.val);
        TraverseInorder(root.right, inorder);        
    }
}
