/*
Given a collection of distinct integers, return all possible permutations.

Example:

Input: [1,2,3]
Output:
[
  [1,2,3],
  [1,3,2],
  [2,1,3],
  [2,3,1],
  [3,1,2],
  [3,2,1]
]
*/

public class Solution {
    public IList<IList<int>> Permute(int[] nums) {
        IList<IList<int>> result = new List<IList<int>>();
        Permute(result, 0, nums);
        return result;
    }
    
    private void Swap(ref int[] nums, int i, int j) {
        int t = nums[i];
        nums[i] = nums[j];
        nums[j] = t;
    }
    
    private void Permute(IList<IList<int>> result, int start, int[] nums){
        if (start >= nums.Length) {
            result.Add(nums.ToList());
        } else {
            for (int i = start; i < nums.Length; i++) {
                Swap(ref nums, i, start);
                Permute(result, start + 1, nums);
                Swap(ref nums, i, start);
            }
        }
    }
}
