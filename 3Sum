//C# 3 Sum

/*
Given an array S of n integers, are there elements a, b, c in S such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.

Note: The solution set must not contain duplicate triplets.

For example, given array S = [-1, 0, 1, 2, -1, -4],

A solution set is:
[
  [-1, 0, 1],
  [-1, -1, 2]
]

*/

public class Solution {
    public IList<IList<int>> ThreeSum(int[] nums) {
        
        IList<IList<int>> res = new List<IList<int>>();
        HashSet<string> collection = new HashSet<string>();        
        Array.Sort(nums);
        
        for (int i = 0; i < nums.Length-2; i++){                    
            FindTwoSum(nums, 0 - nums[i], i + 1, res, collection);                      
        }  
        
        return res;
    }
    
    private void FindTwoSum(int[] nums, int target, int start, IList<IList<int>> res, HashSet<string> collection){
        int left = start;
        int right = nums.Length - 1;
        int sum, prevLeft, prevRight;
                  
        while (left < right){
            sum = nums[left] + nums[right];          
                      
            if (sum == target){
                if (!collection.Contains((0 - target).ToString()+','+nums[left].ToString()+','+nums[right].ToString())){                 
                    collection.Add((0 - target).ToString()+','+nums[left].ToString()+','+nums[right].ToString());     
                    res.Add(new List<int>{0 - target, nums[left], nums[right]});                 
                }
                
                //increments to remove duplicates. duplicates are taken care by collection hash set.
                //this is optimization
                
                do{
                    right--;
                } while((right > start) && (nums[right] == nums[right + 1]));
                
                do{
                    left++;
                } while((left < nums.Length-1) && (nums[left] == nums[left - 1])); 
                
            } else if (sum > target){
                right--;
            } else {
                left++;
            }
        }
        
    }
}
