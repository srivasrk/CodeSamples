//C# find min in a rotated array
/*
[4,5,6,0,1,2,3]
*/

//There are two solutions in this file


//Solution 1

public class Solution {
    public int FindMin(int[] nums) {
        
        int left = 0;
        int right = nums.Length - 1;
        
        while (left < right) {
            int mid = left + (right - left)/2;
            
            if (nums[mid] > nums[right]){
                left = mid+1;
            } else {
                right = mid;
            }
        }
        return nums[left];
        
    }
}


//Solution 2

public class Solution {
    
    public int FindMinimum(int[] arr, int low, int high){
        
        // This condition is needed to handle the case when array is not
        // rotated at all
        if (high < low)  return arr[0];
     
        // If there is only one element left
        if (high == low) return arr[low];
     
        // Find mid
        int mid = low + (high - low)/2; /*(low + high)/2;*/
     
        // Check if element (mid+1) is minimum element. Consider
        // the cases like {3, 4, 5, 1, 2}
        if (mid < high && arr[mid+1] < arr[mid])
           return arr[mid+1];
     
        // Check if mid itself is minimum element
        if (mid > low && arr[mid] < arr[mid - 1])
           return arr[mid];
     
        // Decide whether we need to go to left half or right half
        if (arr[high] > arr[mid])
           return FindMinimum(arr, low, mid-1);
           
        return FindMinimum(arr, mid+1, high);
        
    }
    
    public int FindMin(int[] nums) {
        return FindMinimum(nums, 0, nums.Length - 1);
     
    }
        
}
