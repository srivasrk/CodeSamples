/*
Implement a trie with insert, search, and startsWith methods.

Example:

Trie trie = new Trie();

trie.insert("apple");
trie.search("apple");   // returns true
trie.search("app");     // returns false
trie.startsWith("app"); // returns true
trie.insert("app");   
trie.search("app");     // returns true
Note:

You may assume that all inputs are consist of lowercase letters a-z.
All inputs are guaranteed to be non-empty strings.

*/

public class Trie {
    
    class TrieNode {
        public TrieNode[] Children = new TrieNode[26];
        public bool IsEnd = false;        
    }
    
    TrieNode root;

    /** Initialize your data structure here. */
    public Trie() {
        root = new TrieNode();
    }
    
    /** Inserts a word into the trie. */
    public void Insert(string word) {
        
        TrieNode pointer = root;
        
        for(int i = 0; i < word.Length; i++) {            
            char c = word[i];
            if (pointer.Children[c - 'a'] == null) {
                pointer.Children[c - 'a'] = new TrieNode();
            }
            
            pointer = pointer.Children[c - 'a'];
        }
        
        pointer.IsEnd = true;
    }
    
    /** Returns if the word is in the trie. */
    public bool Search(string word) {
        
        TrieNode pointer = root;
        
        for(int i = 0; i < word.Length; i++) {            
            char c = word[i];
            if (pointer.Children[c - 'a'] == null) {
                return false;
            } else {
                pointer = pointer.Children[c - 'a'];                
            }
        }
        
        return pointer.IsEnd;
    }
    
    /** Returns if there is any word in the trie that starts with the given prefix. */
    public bool StartsWith(string prefix) {
        TrieNode pointer = root;
        
        for(int i = 0; i < prefix.Length; i++) {            
            char c = prefix[i];
            if (pointer.Children[c - 'a'] == null) {
                return false;
            } else {
                pointer = pointer.Children[c - 'a'];                
            }
        }
        
        return true;
        
    }
}

/**
 * Your Trie object will be instantiated and called as such:
 * Trie obj = new Trie();
 * obj.Insert(word);
 * bool param_2 = obj.Search(word);
 * bool param_3 = obj.StartsWith(prefix);
 */
