/*
There are two sorted arrays nums1 and nums2 of size m and n respectively.

Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).

You may assume nums1 and nums2 cannot be both empty.

Example 1:

nums1 = [1, 3]
nums2 = [2]

The median is 2.0
Example 2:

nums1 = [1, 2]
nums2 = [3, 4]

The median is (2 + 3)/2 = 2.5
*/


// Java median of 2 sorted arrays
// O(log(min(lengthNums1, lengthNums2)))

class Solution {
    public double findMedianSortedArrays(int[] nums1, int[] nums2) {
        
        int lengthX = nums1.length;
        int lengthY = nums2.length;
        
        if (lengthX > lengthY) {
            return findMedianSortedArrays(nums2, nums1);
        }
        
        int start = 0;
        int end = lengthX;
        
        while (start <= end) {
            int pivotX = (start + end)/2;
            int pivotY = (lengthX + lengthY + 1)/2 - pivotX;
            
            int maxLeftX = (pivotX == 0) ? Integer.MIN_VALUE : nums1[pivotX - 1];
            int minRightX = (pivotX == lengthX) ? Integer.MAX_VALUE : nums1[pivotX];
            
            int maxLeftY = (pivotY == 0) ? Integer.MIN_VALUE : nums2[pivotY - 1];
            int minRightY = (pivotY == lengthY) ? Integer.MAX_VALUE : nums2[pivotY];
            
            if (maxLeftX <= minRightY && maxLeftY <= minRightX) {
                if ((lengthX + lengthY) % 2 == 0) {
                    return (double) (Math.max(maxLeftX, maxLeftY) + Math.min(minRightX, minRightY))/2;
                } else {
                    return (double) Math.max(maxLeftX, maxLeftY);
                }
            } else if (maxLeftX > minRightY) {
                end = pivotX - 1;
            } else {
                start = pivotX + 1;
            }
        }
        
        return -1;
    }
}


// C# median of 2 sorted arrays
// This is Brute force. See the other solution for O(log(min(lengthNums1, lengthNums2)))
// Time complexity of this solution O(m+n)
public class Solution {
    
    public int[] MergeSortedArrays(int[] nums1, int[] nums2){
        int size = nums1.Length + nums2.Length;
        int[] nums = new int[size];
        
        int index1 = 0;
        int index2 = 0;
        int index = 0;
        
        while ((index1 < nums1.Length) && (index2 < nums2.Length) ){
            if (nums1[index1] < nums2[index2]) {
                //Console.WriteLine("1. Copied {0} in the merged array at posn {1}", nums1[index1], index);
                nums[index++] = nums1[index1++];
                
            } else {
                //Console.WriteLine("2. Copied {0} in the merged array at posn {1}", nums2[index2], index);
                nums[index++] = nums2[index2++];
            }
        }
        
        for (; index1 < nums1.Length; index1++){
            //Console.WriteLine("3. Copied {0} in the merged array at posn {1}", nums1[index1], index);
            nums[index] = nums1[index1];
            index++;
        }
        
        for (; index2 < nums2.Length; index2++){
            //Console.WriteLine("4. Copied {0} in the merged array at posn {1}", nums2[index2], index);
            nums[index] = nums2[index2];
            index++;
        }
        
        return nums;
    }
    
    public double FindMedianSortedArrays(int[] nums1, int[] nums2) {
        
        int[] nums = MergeSortedArrays(nums1, nums2);
        double median = -1;
        int middle = 0;
        
        if (nums.Length > 0){
            if (nums.Length % 2 == 0){
                middle = nums.Length/2;
                median = (double) ((nums[middle] + nums[middle-1]))/2;
            } else {
                median = nums[nums.Length/2];
            }
        } else {
            median = -1;
        }
        
        for (int index = 0; index < nums.Length; index++){
            Console.WriteLine(nums[index]);
        }
        
        return median;
        
    }
}
