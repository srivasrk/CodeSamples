//C# Matrix rotate

/*
You are given an n x n 2D matrix representing an image.
Rotate the image by 90 degrees (clockwise).
*/

//There are 2 solutions in this file.

//This is in-place.
public class Solution {
    public void Rotate(int[,] matrix) {
        
        int n = matrix.GetLength(0);
        int t;
        
        //for eg: start with 
        //1 2 3
        //4 5 6
        //7 8 9
        for (int i = 0; i < n; i++){
            for (int j = 0; j < n/2; j++){
                t = matrix[i,j];
                matrix[i,j] = matrix[i,n-j-1];
                matrix[i,n-j-1] = t;
            }
        }
        //now we have 
        //3 2 1 
        //6 5 4 
        //9 8 7 

        for (int i = 0; i < n; i++){
            for (int j = 0; j < n-i; j++){
                t = matrix[i,j];
                matrix[i,j] = matrix[n-j-1,n-i-1];
                matrix[n-j-1,n-i-1] = t;
            }
        }
        //now we have 
        //7 4 1 
        //8 5 2 
        //9 6 3 
        
    }
}

//This takes extra N x N space.
public class Solution {
    public void Rotate(int[,] matrix) {
        //.Rank for the number of dimensions. 
        //.GetLength(0) for the number of rows, 
        //.GetLength(1) for the number of columns.
        
        int size = matrix.GetLength(0);//square matrix so len == width
        
        int[,] newmat = new int[size,size];
        
        for (int row = 0; row < size; row++){
            for (int col = 0; col < size; col++){
                newmat[col, size-row-1] = matrix[row, col];
            }
        }
        
        for (int row = 0; row < size; row++){
            for (int col = 0; col < size; col++){
                matrix[row, col] = newmat[row, col];
            }
        }
        
    }
}
