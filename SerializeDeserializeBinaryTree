//C# Serialize and Deserialize a Binary Tree

/*
Serialization is the process of converting a data structure or object into a sequence of bits 
so that it can be stored in a file or memory buffer, or transmitted across a network connection 
link to be reconstructed later in the same or another computer environment.

Design an algorithm to serialize and deserialize a binary tree. There is no restriction on 
how your serialization/deserialization algorithm should work. You just need to ensure that 
a binary tree can be serialized to a string and this string can be deserialized to the 
original tree structure.

For example, you may serialize the following tree
    1
   / \
  2   3
     / \
    4   5
    
as "[1,2,3,null,null,4,5]", just the same as how LeetCode OJ serializes a binary tree. 
You do not necessarily need to follow this format, so please be creative and come up 
with different approaches yourself.
Note: Do not use class member/global/static variables to store states. Your serialize 
and deserialize algorithms should be stateless.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Codec {

    // Encodes a tree to a single string.
    public string serialize(TreeNode root) {
        string preorder = "";
        return BuildSerializedPreOrder(root, preorder);
    }
    
    private string BuildSerializedPreOrder(TreeNode root, string preorder){
        if (root == null) {
            preorder = preorder + "X" + ",";
        } else {
            preorder = preorder + Convert.ToString(root.val) + ",";
            preorder = BuildSerializedPreOrder(root.left, preorder);
            preorder = BuildSerializedPreOrder(root.right, preorder);
        }
        return preorder;
    }

    // Decodes your encoded data to tree.
    public TreeNode deserialize(string data) {
        List<string> nodes = data.Split(',').ToList();
        return DeserializePreOrder(nodes);
    }
    
    private TreeNode DeserializePreOrder(List<string> nodes){
        if (nodes.Count <= 0){
            return null;
        } else if (nodes[0] == "X"){
            nodes.RemoveAt(0);
            return null;
        } else {
            TreeNode root = new TreeNode(Convert.ToInt32(nodes[0]));
            nodes.RemoveAt(0);
            root.left = DeserializePreOrder(nodes);
            root.right = DeserializePreOrder(nodes);
            return root;
        }
    }
}

// Your Codec object will be instantiated and called as such:
// Codec codec = new Codec();
// codec.deserialize(codec.serialize(root));
