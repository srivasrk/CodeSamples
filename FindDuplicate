//C# Find Duplicate
/*
Given an array nums containing n + 1 integers where each integer is between 1 and n (inclusive), 
prove that at least one duplicate number must exist. Assume that there is only one duplicate number, 
find the duplicate one.

Note:
You must not modify the array (assume the array is read only).
You must use only constant, O(1) extra space.
Your runtime complexity should be less than O(n2).
There is only one duplicate number in the array, but it could be repeated more than once.
*/

public class Solution {
    public int FindDuplicate(int[] nums) {
        
        //We have to find the starting point of the cycle.
        //Using the cycle detection approach, we can determine if there is a cycle.
        //The meeting point of fast and slow will be at the same distace, as the distance between
        //starting point of the circle and head of the list.
        
        //similar prob to this 
        //https://github.com/srivasrk/CodeSamples/blob/master/LinkedListCycle2EntryPoint
        
	    if (nums.Length > 1){
		    int slow = nums[0];
		    int fast = nums[nums[0]];

		    while (slow != fast){
			slow = nums[slow];
			fast = nums[nums[fast]];
		    }

		    int slow2 = 0;

		    while (slow != slow2){
			slow = nums[slow];
			slow2 = nums[slow2];
		    }

		    return slow;
	    }
	    
	    return -1;
    }
}

