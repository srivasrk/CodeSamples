//Java Find Median from Data Stream
/*
Median is the middle value in an ordered integer list. If the size of the list is even, there is no middle value. So the median is the mean of the two middle value.

For example,
[2,3,4], the median is 3

[2,3], the median is (2 + 3) / 2 = 2.5

Design a data structure that supports the following two operations:

void addNum(int num) - Add a integer number from the data stream to the data structure.
double findMedian() - Return the median of all elements so far.
 

Example:

addNum(1)
addNum(2)
findMedian() -> 1.5
addNum(3) 
findMedian() -> 2
 

Follow up:

If all integer numbers from the stream are between 0 and 100, how would you optimize it?
If 99% of all integer numbers from the stream are between 0 and 100, how would you optimize it?
*/


import java.util.Collections;
class MedianFinder {

    List<Integer> list;
    
    /** initialize your data structure here. */
    public MedianFinder() {
        list = new ArrayList();
    }
        
    public void addNum(int num) {
        int index = Collections.binarySearch(list, num);
        if (index < 0) index = ~index;
        list.add(index, num);
    }    
    
    public double findMedian() {
        int length = list.size();
        if (length % 2 == 0) return (double)(list.get(length/2) + list.get((length/2)-1))/2;
        else return (double)list.get(length/2);        
    }
}

/**
 * Your MedianFinder object will be instantiated and called as such:
 * MedianFinder obj = new MedianFinder();
 * obj.addNum(num);
 * double param_2 = obj.findMedian();
 */
 
--------------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------------

//C# running median

using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Solution {
class Solution {
    static void Main(string[] args) {
        /* Enter your code here. Read input from STDIN. Print output to STDOUT */
        
        int numInputs = Convert.ToInt32(Console.ReadLine());
        List<int> listOfNumbers= new List<int>();
        float median = 0;
        int position;
        int numberToInsert;
        
        
        for (int index = 1; index <= numInputs; index++){
            numberToInsert = Convert.ToInt32(Console.ReadLine());
                        
            position = listOfNumbers.BinarySearch(numberToInsert);
            if (position < 0){
                position = ~position;
            }
            listOfNumbers.Insert(position, numberToInsert);
            
            if (index % 2 == 0) {
                median = (float)(listOfNumbers[listOfNumbers.Count/2] + (listOfNumbers[(listOfNumbers.Count/2) - 1]))/2;
                
            } else {
                median = (float)(listOfNumbers[(listOfNumbers.Count/2)]);
            }
            
            Console.WriteLine(median.ToString("0.0"));
        }
    }
}
}
