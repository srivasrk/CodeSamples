//C# Reverse Linked List 2

/*
Reverse a linked list from position m to n. Do it in-place and in one-pass.

For example:
Given 1->2->3->4->5->NULL, m = 2 and n = 4,

return 1->4->3->2->5->NULL.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    public ListNode ReverseBetween(ListNode head, int m, int n) {
        
        if (head != null) {
            
            ListNode dummy = new ListNode(0);
            dummy.next = head;
            ListNode prev = dummy;
            
            for (int index = 0; index < m-1; index++) {
                prev = prev.next;    
            }
            //^^ Now, prev points to previous of mth node
            
            ListNode curr = prev.next;//This is where reverse begins. mth node.
            ListNode next = curr.next;//This will eventually hold the n+1th node. (node which was not reversed)
            
            /* 
            Iteration 1:
            1 -> 2 -> 3 -> 4 -> 5 -> 6
            p    c    n
            
            Iteration 2:
            1 -> 3 -> 2 -> 4 -> 5 -> 6
            p         c    n
            
            so on...            
            */
            for (int index = 0; index < n-m; index++) {
                curr.next = next.next;
                next.next = prev.next;
                prev.next = next;
                next = curr.next;
            }
            
            return dummy.next;    
        } else {
            return head;
        }
        
    }
}
