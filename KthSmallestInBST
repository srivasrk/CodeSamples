/*
Given a binary search tree, write a function kthSmallest to find the kth smallest element in it.

Note: 
You may assume k is always valid, 1 ≤ k ≤ BST's total elements.

Example 1:
Input: root = [3,1,4,null,2], k = 1
   3
  / \
 1   4
  \
   2
Output: 1

Example 2:
Input: root = [5,3,6,2,4,null,null,1], k = 3
       5
      / \
     3   6
    / \
   2   4
  /
 1
Output: 3

Follow up:
What if the BST is modified (insert/delete operations) often and you need to find the kth smallest frequently? 
How would you optimize the kthSmallest routine?
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     int val;
 *     TreeNode left;
 *     TreeNode right;
 *     TreeNode(int x) { val = x; }
 * }
 */
class Solution {
    private static int counter = 0;
    public static int number = 0;
    
    public int kthSmallest(TreeNode root, int k) {
        counter = k;
        helper(root);
        return number;            
    }
    
    private void helper(TreeNode root) {
        if (root.left != null) {
            helper(root.left);
        }
        counter--;
        if (counter == 0) {
            number = root.val;
            return;
        }
        if (root.right != null) {
            helper(root.right);
        }   
    }
}
