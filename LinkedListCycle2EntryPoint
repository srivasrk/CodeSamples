//C# Linked List Cycle Entry Point 
/*
Given a linked list, return the node where the cycle begins. If there is no cycle, return null.
*/
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) {
 *         val = x;
 *         next = null;
 *     }
 * }
 */
 
//We have to find the starting point of the cycle.
//Using the cycle detection approach, we can determine if there is a cycle.
//The meeting point of fast and slow will be at the same distace, as the distance between
//starting point of the circle and head of the list.

public class Solution {
    public ListNode DetectCycle(ListNode head) {
        
        
        ListNode fast = head;
        ListNode slow = head;
        ListNode slow2 = head;
        
        while ((fast != null) and (fast.next != null)){
            slow = slow.next;
            fast = fast.fast.next;
            
            if (slow == fast){ ///meeting point = cycle present
                
                //(Distance between meeting point and cycle entry point) = (Distance between head and entry point)
                while (slow2 != slow) {
                    slow2 = slow2.next; 
                    slow = slow.next;
                }
                
                return slow2;
            }
            
        }
        
        return null; //cycle not present
        
    }
}
