//C# Combination sum

/*
Given a set of candidate numbers (C) (without duplicates) and a target number (T), find all unique combinations in C where the candidate numbers sums to T.

The same repeated number may be chosen from C unlimited number of times.

Note:
All numbers (including target) will be positive integers.
The solution set must not contain duplicate combinations.
For example, given candidate set [2, 3, 6, 7] and target 7, 
A solution set is: 
[
  [7],
  [2, 2, 3]
]
*/

public class Solution {
    public IList<IList<int>> CombinationSum(int[] candidates, int target) {
        
        IList<IList<int>> result = new List<IList<int>>();
        GetCombinationSum(candidates, target, result, new List<int>(), 0);  
        return result;
    }
    
    public void GetCombinationSum(int[] candidates, int target, IList<IList<int>> result, IList<int> res, int start){
        
        //Console.WriteLine("Called GetCombinationSum: target:{0}", target);
        
        if (target == 0){
            result.Add( new List<int>(res));
        } else {
            for (int index = start; index < candidates.Length; index++){
                if (candidates[index] <= target){
                    res.Add(candidates[index]);
                    GetCombinationSum(candidates, target-candidates[index], result, res, index);
                    res.RemoveAt(res.Count - 1);
                }
            }
        }
    }
}
