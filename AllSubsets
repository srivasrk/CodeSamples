//C# Print all subsets

/*
Given a set of distinct integers, nums, return all possible subsets.

Note: The solution set must not contain duplicate subsets.

For example,
If nums = [1,2,3], a solution is:

[
  [3],
  [1],
  [2],
  [1,2,3],
  [1,3],
  [2,3],
  [1,2],
  []
]
*/

//Solution 1

public class Solution {
    public IList<IList<int>> Subsets(int[] nums) {
        IList<IList<int>> result = new List<IList<int>>();
        result.Add(new List<int>()); //Add empty list
        
        for (int i = 0; i < nums.Length; i++) {
            int size = result.Count();
            
            for (int j = 0; j < size; j++) {
                IList<int> subset = new List<int>(result[j]);//make a copy of an existing list
                subset.Add(nums[i]);//add the nums[i] to the new list
                result.Add(subset);//add the new list to the existing list of lists
            }
        }
        return result;
    }
}

//Solution 2

public class Solution {
    public IList<IList<int>> Subsets(int[] nums) {
        
        IList<IList<int>> res = new List<IList<int>>();

        if (nums.Length > 0){
            CreateSubsets(nums, res, new List<int>(), 0);
        }    
        return res;
    }
    
    public void CreateSubsets(int[] nums, IList<IList<int>> res, IList<int> cur, int start){
        res.Add(new List<int>(cur));
        
        for (int i = start; i < nums.Length; i++){
            cur.Add(nums[i]);
            CreateSubsets(nums, res, cur, i+1);
            cur.RemoveAt(cur.Count-1);
        }
    }
}
