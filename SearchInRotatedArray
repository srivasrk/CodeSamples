// C# Search in a rotated array

/*
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.
*/


public class Solution {
    public int Search(int[] nums, int target) {
        return Search(nums, target, 0, nums.Length - 1);      
    }
    
    public int Search(int[] nums, int target, int low, int high) {
        
        if ((low > high) || (high >= nums.Length) || (low < 0)){
            return -1;
        }
        
        int mid = low + ((high - low) / 2);
        
        if (target == nums[mid]) {
            return mid;
        }
        
        if (nums[low] <= nums[mid]) { //left side is sorted
            if ((target <= nums[mid]) && (target >= nums[low])) {
                return Search(nums, target, low, mid - 1);
            }
            
            //target is not present in the left side, find in the right side
            return Search(nums, target, mid + 1, high);
        }
        
        //left side is not sorted.
        //right side is sorted.
        if ((target >= nums[mid]) && (target <= nums[high])) {
            return Search(nums, target, mid + 1, high);
        }
        
        //target is not present in the right side, find in the left side
        return Search(nums, target, low, mid - 1);
        
    }
}
