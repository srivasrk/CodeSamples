// C# Search in a rotated array

/*
Suppose an array sorted in ascending order is rotated at some pivot unknown to you beforehand.

(i.e., 0 1 2 4 5 6 7 might become 4 5 6 7 0 1 2).

You are given a target value to search. If found in the array return its index, otherwise return -1.

You may assume no duplicate exists in the array.
*/

public class Solution {
    public int Search(int[] nums, int target) {
        return Search(nums, target, 0, nums.Length-1);
    }
    
    private int Search(int[] nums, int target, int start, int end)  {
        if ((start > end) || (end >= nums.Length) || (start < 0)){
            Console.WriteLine("start: {0}, end: {1}, length: {2}", start, end, nums.Length);
            return -1;
        }
        
        int mid = start + ((end - start) / 2);
        
        if (nums[mid] == target) {
            return mid;
        } else {
            if (nums[start] <= nums[mid]) {
                //left half is sorted. try to find in left half
                if ((target <= nums[mid]) && (target >= nums[start])) { //optimization to avoid unneceassary call
                    return Search(nums, target, start, mid - 1);
                }
                
                return Search(nums, target, mid + 1, end);
            }
            
            //left half is not sorted OR did not find target in the left half
            //right half is sorted. try to find in right half
            if ((target >= nums[mid]) && (target <= nums[end])) { //optimization to avoid unneceassary call               
                return Search(nums, target, mid + 1, end);
            }
             return Search(nums, target, start, mid - 1);
        }
    }
}
