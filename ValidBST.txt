//C# Valid BST

/*
Given a binary tree, determine if it is a valid binary search tree (BST).

Assume a BST is defined as follows:

The left subtree of a node contains only nodes with keys less than the node's key.
The right subtree of a node contains only nodes with keys greater than the node's key.
Both the left and right subtrees must also be binary search trees.
*/

/**
 * Definition for a binary tree node.
 * public class TreeNode {
 *     public int val;
 *     public TreeNode left;
 *     public TreeNode right;
 *     public TreeNode(int x) { val = x; }
 * }
 */
public class Solution {
    
    public bool IsValid(TreeNode root, Int64 min, Int64 max){
        if (root == null){
            return true;
        } else if ((root.val <= min) || (root.val >= max)) {
            return false;
        } else {
            return (IsValid(root.left, min, root.val) &&
            IsValid(root.right, root.val, max));
        }
    }
    
    public bool IsValidBST(TreeNode root) {
        if (root == null){
            return true;
        }
        
        return (IsValid(root, Int64.MinValue, Int64.MaxValue));
        
    }
}