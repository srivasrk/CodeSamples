/*
Given an input string (s) and a pattern (p), implement wildcard pattern matching with support for '?' and '*'.

'?' Matches any single character.
'*' Matches any sequence of characters (including the empty sequence).
The matching should cover the entire input string (not partial).

Note:

s could be empty and contains only lowercase letters a-z.
p could be empty and contains only lowercase letters a-z, and characters like ? or *.

Example 1:
Input:
s = "aa"
p = "a"
Output: false
Explanation: "a" does not match the entire string "aa".

Example 2:
Input:
s = "aa"
p = "*"
Output: true
Explanation: '*' matches any sequence.

Example 3:
Input:
s = "cb"
p = "?a"
Output: false
Explanation: '?' matches 'c', but the second letter is 'a', which does not match 'b'.

Example 4:
Input:
s = "adceb"
p = "*a*b"
Output: true
Explanation: The first '*' matches the empty sequence, while the second '*' matches the substring "dce".

Example 5:
Input:
s = "acdcb"
p = "a*c?b"
Output: false
*/

public class Solution {
    public bool IsMatch(string s, string p) {
        int index_of_star = -1;
        int index_of_match = 0;
        int index_of_s = 0;
        int index_of_p = 0;
        
        while(index_of_s < s.Length) {
            if ((index_of_p < p.Length) && ((s[index_of_s] == p[index_of_p]) || (p[index_of_p] == '?'))) {
                index_of_s++;
                index_of_p++;
            } else if ((index_of_p < p.Length) && (p[index_of_p] == '*')) {
                index_of_match = index_of_s;
                index_of_star = index_of_p;
                index_of_p++;
            } else if (index_of_star != -1) {
                index_of_p = index_of_star + 1;
                index_of_match++;
                index_of_s = index_of_match;
            } else {
                return false;
            }
        } 
        
        while ((index_of_p < p.Length) && (p[index_of_p] == '*')){
            index_of_p++;
        }
        
        if (index_of_p == p.Length) {
            return true;
        } else {
            return false;
        }
    }
}
