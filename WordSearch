//C# Word search

/*
Given a 2D board and a word, find if the word exists in the grid.

The word can be constructed from letters of sequentially adjacent cell, where "adjacent" cells are those horizontally or vertically neighboring. The same letter cell may not be used more than once.

For example,
Given board =

[
  ['A','B','C','E'],
  ['S','F','C','S'],
  ['A','D','E','E']
]
word = "ABCCED", -> returns true,
word = "SEE", -> returns true,
word = "ABCB", -> returns false.

example 2:
[["a"]]
"a" return true
*/

public class Solution {
    public bool Exist(char[,] board, string word) {
        
        if (word.Length < 1) 
            return false;
        
        int rows = board.GetLength(0);
        int cols = board.GetLength(1);
        char t;
        
        for (int i = 0; i < rows; i++){
            for (int j = 0; j < cols; j++){
                
                if (NextExists(board, i, j, word, 0)) {
                    return true;
                }                
            }
        }
        return false;
    }
    
    public bool NextExists(char[,] board, int row, int col, string word, int index){
        
        if (index == word.Length){
            return true;
        }
        
        if ((row >= 0) && (col >= 0) && (row < board.GetLength(0)) && (col < board.GetLength(1))){
            if (word[index] == board[row, col]){
                char t = board[row, col];
                board[row, col] = '\0';
                bool res = (NextExists(board, row-1, col, word, index+1) ||
                NextExists(board, row, col-1, word, index+1) ||
                NextExists(board, row+1, col, word, index+1) ||
                NextExists(board, row, col+1, word, index+1));
                
                if (!res) {
                    board[row, col] = t;    
                }                 
                return res;
            }
        }
        return false;
    }
}
