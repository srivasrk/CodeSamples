//C# Sort List : Merge Sort

/*
Sort a linked list in O(n log n) time using constant space complexity.
*/

/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     public int val;
 *     public ListNode next;
 *     public ListNode(int x) { val = x; }
 * }
 */
public class Solution {
    
    public ListNode Merge(ListNode list1, ListNode list2){
        
        ListNode result = new ListNode(0);
        ListNode p = result;

        while ((list1 != null) && (list2 != null)){
            
            if (list1.val > list2.val){
                p.next = list2;
                list2 = list2.next;
            } else {
                p.next = list1;
                list1 = list1.next;
            }
            
            p = p.next;
        }
        
        if (list1 != null){
            p.next = list1;
        }
        
        if (list2 != null){
            p.next = list2;
        }
        
        return result.next;
    }
    
    
    public ListNode SortList(ListNode head) {
        
        if ((head == null) || (head.next == null)){
            return head;
        }
        
        ListNode fast = head;
        ListNode slow = head;
        ListNode prev = null;
        
         while ((fast != null) && (fast.next != null)) {
            prev = slow;
            slow = slow.next;
            fast = fast.next.next;
        }
        prev.next = null;   
        
        ListNode l1 = SortList(head);
        ListNode l2 = SortList(slow);
        
        return Merge(l1, l2);
    }
}    
