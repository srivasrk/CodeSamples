/*
Given two integers representing the numerator and denominator of a fraction, return the fraction in string format.

If the fractional part is repeating, enclose the repeating part in parentheses.

Example 1:
Input: numerator = 1, denominator = 2
Output: "0.5"

Example 2:
Input: numerator = 2, denominator = 1
Output: "2"

Example 3:
Input: numerator = 2, denominator = 3
Output: "0.(6)"
*/

// Time complexity: ?

class Solution {
    public String fractionToDecimal(int numerator, int denominator) {
        
        if  (numerator == 0) {
            return "0";
        }
        
        StringBuilder result = new StringBuilder();
        
        // XOR operation. 
        // if both are +ve or both -ve, then sign stays +ve
        result.append((numerator < 0) ^ (denominator < 0) ? "-" : "");
        long num = Math.abs((long)numerator);
        long den = Math.abs((long)denominator);
        
        // Integer part. before decimal
        result.append(num/den);
        num = num % den;
        if (num == 0) {
            return result.toString();
        }
        
        // fractional part
        result.append(".");
        Map<Long, Integer> map = new HashMap();
        map.put(num, result.length());
        while(num != 0) {
            num = num * 10;
            result.append(num/den);
            num = num % den;
            if (map.containsKey(num)) {
                int index = map.get(num);
                result.insert(index, "(");
                result.append(")");
                break;
            } else {
                map.put(num, result.length());
            }
        }
        
        return result.toString();    
    }
}
