//C# Find Unique Path

/*
A robot is located at the top-left corner of a m x n grid.
https://leetcode.com/problems/unique-paths/#/description

The robot can only move either down or right at any point in time. 
The robot is trying to reach the bottom-right corner of the grid.
How many possible unique paths are there?

Note: m and n will be at most 100.
*/

public class Solution {
    public int UniquePaths(int m, int n) {
        
        int[,] matrix = new int[m+1, n+1];
        
        for (int i = 0; i < m; i++){
            for (int j = 0; j < n; j++){
                matrix[i, j] = -1;
            }
        }
        
        return FindUniquePaths(m, n, 0, 0, matrix);
    }
    
    private int FindUniquePaths(int rows, int cols, int row, int col, int[,] matrix){
                
        if ((row == rows - 1) && (col == cols - 1)){
            return 1;
        } else if ((row >= rows) || (col >= cols)) {
            return 0;
        }
        
        if (matrix[row + 1, col] == -1){
            matrix[row + 1, col] = FindUniquePaths(rows, cols, row + 1, col, matrix);
        }
        
        if (matrix[row, col + 1] == -1){
            matrix[row, col + 1] = FindUniquePaths(rows, cols, row, col + 1, matrix);
        }
        
        return (matrix[row + 1, col] + matrix[row, col + 1]);
    }
    
}
