//C# IsCryptSolution - Code Fights

/*
A cryptarithm is a mathematical puzzle for which the goal is to find the 
correspondence between letters and digits, such that the given arithmetic 
equation consisting of letters holds true when the letters are converted to 
digits.

You have an array of strings crypt, the cryptarithm, and an an array containing 
the mapping of letters and digits, solution. The array crypt will contain three
non-empty strings that follow the structure: [word1, word2, word3], which should
be interpreted as the word1 + word2 = word3 cryptarithm.

If crypt, when it is decoded by replacing all of the letters in the cryptarithm 
with digits using the mapping in solution, becomes a valid arithmetic equation 
containing no numbers with leading zeroes, the answer is true. If it does not 
become a valid arithmetic solution, the answer is false.

Example

For crypt = ["SEND", "MORE", "MONEY"] and

solution = [['O', '0'],
            ['M', '1'],
            ['Y', '2'],
            ['E', '5'],
            ['N', '6'],
            ['D', '7'],
            ['R', '8'],
            ['S', '9']]
the output should be
isCryptSolution(crypt, solution) = true.

When you decrypt "SEND", "MORE", and "MONEY" using the mapping given in 
crypt, you get 9567 + 1085 = 10652 which is correct and a valid arithmetic 
equation.

For crypt = ["TEN", "TWO", "ONE"] and

solution = [['O', '1'],
            ['T', '0'],
            ['W', '9'],
            ['E', '5'],
            ['N', '4']]
the output should be
isCryptSolution(crypt, solution) = false.

Even though 054 + 091 = 145, 054 and 091 both contain leading zeroes, meaning 
that this is not a valid solution.
*/

bool isCryptSolution(string[] crypt, char[][] solution) {
    
    Dictionary<char, char> map = new Dictionary<char, char>();
    
    for (int i = 0; i < solution.Length; i++){
        if (!map.ContainsKey(solution[i][0])){
            map.Add(solution[i][0], solution[i][1]);
        }
    }
    
    char[] w1 = crypt[0].ToArray();
    char[] w2 = crypt[1].ToArray();
    char[] w3 = crypt[2].ToArray();

    for (int i = 0; i < w1.Length; i++){
        w1[i] = map[w1[i]];        
    }
    for (int i = 0; i < w2.Length; i++){
        w2[i] = map[w2[i]];
    }
    for (int i = 0; i < w3.Length; i++){
        w3[i] = map[w3[i]];
    }
    
    //special case check
    if ( ((w1[0] == '0') && (w1.Length > 1)) || ((w2[0] == '0') && (w2.Length > 1)) 
       || ((w3[0] == '0') && (w3.Length > 1))){
        return false;
    }
    
    Int64 num1 = ConvertStrToInt(w1);
    Int64 num2 = ConvertStrToInt(w2);
    Int64 num3 = ConvertStrToInt(w3);
    
    Console.WriteLine("num1:{0}, num2:{1}, num3:{2}", num1, num2, num3);
    
    if ((num1 + num2) == num3){
        return true;
    } else {
        return false;
    }
}


private Int64 ConvertStrToInt(char[] str){
    Int64 num = 0;
    
    for (int i = 0; i < str.Length; i++){
        num = (num * 10) + (int)(str[i] - '0');
    }
    
    return num;
}
