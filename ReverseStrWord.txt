//C# Reverse string - word placement

/*
Given an input string, reverse the string word by word. A word is defined as a sequence of non-space characters.

The input string does not contain leading or trailing spaces and the words are always separated by a single space.

For example,
Given s = "the sky is blue",
return "blue is sky the".
*/

// Solution 1
public class Solution {
    
    public void Reverse(char[] s, int start, int end){
        
        if (end - start < 1){
            return;
        }
        
        char c;
        int mid = (start + end)/2;        
        
        for (int index = start; index <= mid; index++){
            c = s[index];
            s[index] = s[end-(index-start)];
            s[end-(index-start)] = c;
            
        }
    }
    
    public void ReverseWords(char[] s) {
        
        if (s.Length == 0){
            return;
        }
        
        Reverse(s, 0, s.Length-1);
        
        int k = 0;
        int index = 0;

        for (index = 0; index < s.Length; index++){
            if (s[index] == ' '){
                Reverse(s, k, index-1);
                k = index+1;
            }
        }
        
        Reverse(s, k, s.Length - 1);  
        
    }
}

//Solution 2
public class Solution {
    public string ReverseWords(string s) {
    
        if (string.IsNullOrEmpty(s)) {
            return s;
        }
        
        var result = new StringBuilder();
        var temp = new StringBuilder();
        
        int start = s.Length - 1;;
        
        while (start >= 0) {
            if ((s[start] == ' ') && (!string.IsNullOrEmpty(temp.ToString()))) {
                result.Append(' ' + temp.ToString());    
                temp.Clear();
            } else if (s[start] != ' ') {
                temp.Insert(0, s[start]);
            }
            start--;
        }
        
        if (!string.IsNullOrEmpty(temp.ToString())) {
            result.Append(' ' + temp.ToString());    
            temp.Clear();
        }
        return result.ToString().Trim();
    }
}
